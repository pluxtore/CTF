#!/usr/bin/python
from Crypto.Util.number import long_to_bytes

def multiplicative_inverse(e, phi): # taken from external source
# https://gist.githubusercontent.com/JonCooperWorks/5314103/raw/a5b868644ee4cbfac349d6b2a9a4f4c651f2cd53/rsa.py
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi
    
    while e > 0:
        temp1 = temp_phi/e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2
        
        x = x2- temp1* x1
        y = d - temp1 * y1
        
        x2 = x1
        x1 = x
        d = y1
        y1 = y
    
    if temp_phi == 1:
        return d + phi



N = 10327849034940138613515485956077213322791085874638285662823764630659653931824178919168344401508423966366637831067655701114352106747323628144645384205073278784870804834942988268503504130770762781798270763453272421050209487483563600870343875197428105079394315585993355808937811229959083289653056248770988647762812998870912510238393368777882358059256678052653963583286245796285737035786447522814310717433588049686223718247661713594680120785280795132759253149754143640871380226770164628599577669124463514838464342769690232097283333816896581904763736283142031118073027496197756777460403007359764250621763279762041468943079

for i in range(2, 1000000):
    if N % i == 0:
        print("factor found: " + str(i))
	p = i
        break
print("calculating other factor ... ")
q = N/p
# print(q)
e = 65537 # hardcode it...
phi = (p-1) * (q-1) # compute totient
d = multiplicative_inverse(e, phi) # derive d from totient and e
# print("private exponent: ") 
# print(d) #--> check-> is correct

""" from static.allescrd.net """
c = 4522827319495133992180681297469132393090864882907734433792485591515487678316653190385712678072377419115291918844825910187405830252000250630794128768175509500175722681252259065645121664124102118609133000959307902964132117526575091336372330412274759536808500083138400040526445476933659309071594237016007983559466411644234655789758508607982884717875864305554594254277210539612940978371460389860098821834289907662354612012313188685915852705277220725621370680631005616548237038578956187747135229995137050892471079696577563496115023198511735672164367020373784482829942657366126399823845155446354953052034645278225359074399

decrypted = pow(c, d, N)
# print(decrypted)
print(long_to_bytes(decrypted))
